// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  passwordHash String
  displayName  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  settings     Settings?
  sessions     BrewSession[]

  @@map("users")
}

model Settings {
  id              String   @id @default(cuid())
  userId          String   @unique
  units           String   @default("METRIC") // METRIC or IMPERIAL
  tempUnit        String   @default("C") // C or F
  recommend       Boolean  @default(true)
  defaultMethodId String?
  cupSizeMl       Int      @default(240) // user's "cup" definition
  soundEnabled    Boolean  @default(true)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("settings")
}

// Enums replaced with string constants for SQLite compatibility
// Units: "METRIC" | "IMPERIAL"  
// TempUnit: "C" | "F"

model BrewMethod {
  id           String        @id @default(cuid())
  key          String        @unique // "v60", "chemex", "aeropress", "french_press", "moka"
  name         String
  defaultRatio Float // e.g., 15 for 1:15
  bloom        Boolean // does this method bloom?
  pours        Int // typical # pours not counting bloom
  notes        String?
  presets      String? // method-specific advice as JSON string
  sessions     BrewSession[]

  @@map("brew_methods")
}

model BrewSession {
  id           String     @id @default(cuid())
  userId       String
  methodId     String
  startedAt    DateTime   @default(now())
  durationSec  Int
  coffeeGrams  Float
  waterMl      Float
  yieldMl      Float
  grindSetting String? // free text or grinder scale
  waterTempC   Float?
  rating       Int? // 1â€“5
  notes        String?
  pours        String? // timestamps & volumes as JSON string
  bean         String? // variety, roaster, roast date as JSON string
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  method       BrewMethod @relation(fields: [methodId], references: [id])

  @@map("brew_sessions")
}